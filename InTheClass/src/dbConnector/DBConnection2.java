package dbConnector;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import oracle.jdbc.driver.OracleDriver;

public class DBConnection2 {
	private Connection conn;
	private PreparedStatement ps;
	private ResultSet rs;

	public void connect() throws Exception {
		// oracle DB접속하는 코드 1table space는 1파일 (dbf)\
		// oracle이 라이브러리를 .jar파일로 배포
		// 외부라이브러리 추가 방법 -> 프로젝트 우클릭, build Path -> configure Build Path -> Libraries ->
		// add External Libraries
		/*
		 * 오라클 접속 방법 
		 * 1. 오라클 드라이버 로드(Class.forName()사용) 
		 * 2. DriverManager의 getConnection() 이용하여 db접속, DriverManager는 자바 API의 클래스.
		 * 3. Connection의 prepareStatement()를 이용하여 쿼리문을 심고 PreparedStatement 리턴 받음 
		 * 4. PreparedStatement를 이용하여 쿼리 실행 
		 * 5. 쿼리문 실행은 두가지가 있음 
		 * 	 a. select문 : executeQuery() 
		 *   b. insert, delete, update문 : executeUpdate() 
		 * 6. 5번의 a는 ResultSet을 리턴 받음 b는 정수를 리턴받음 
		 * 7. select문을 쿼리로 실행했으면 ResultSet을 이용하여 리턴받음 값을
		 * 읽어내야함
		 */
		
		Class.forName("oracle.jdbc.driver.OracleDriver"); // 문자열-패키지명.클래스명, reflection
		// 문자열의 컬렉션을 인스턴스화 시켜줌, 문자열을 줘서 해당되는 것을 메모리에 올림..
//		OracleDriver od = new OracleDriver(); 이렇게 하면 DB접속되면 계속 new됨; 메모리가 계속참 
		// 접속할 db의 주소 "문자열"
		String url = "jdbc:oracle:thin:@127.0.0.1:1521:XE";
		// 오라클db의 주소를 알려줘야함
		conn = DriverManager.getConnection(url, "hr", "1234"); // getConnection은 static
		// 오라클이랑 연결됨, getConnection메소드는 connection을 리턴함
		// connection은 인터페이스
		// getConnection() : Attempts to establish a connection to the given database URL.
		// return type : connection(interface)
		// connection(interface) method 중에 prepareStatement()가 있음
		// prepareStatement(String sql) Creates a PreparedStatement object for sending parameterized SQL statements to the database.
		// 

//		String query = "SELECT *"; 이런식으로 하면 안됨 
//		       query += "FROM EMPLOYEES"; 

		StringBuilder query = new StringBuilder();
		query.append("SELECT FIRST_NAME, SALARY, DEPARTMENT_ID ");
		query.append("FROM EMPLOYEES "); // 공백을 꼭줘야함
		
		ps = conn.prepareStatement("SELECT FIRST_NAME, SALARY, DEPARTMENT_ID FROM EMPLOYEES ");
//		ps = conn.prepareStatement(query.toString()); // 지금까지의 내용을 ps로 받음,url,conn 주소로 날라감
//		ps = return 받은 prepare"d"Statement(interface)
		
		rs = ps.executeQuery(); // 결과를 rs가 받음
//		prepare"d"Statement interface에 executeQuery() method가 있음
//		executeQuery() : Executes the SQL query in this PreparedStatement object and returns the ResultSet object generated by the query.
//		rs = resultSet type
//		resultSet은 interface 그 안의 next() return boolean, method를 이용해서 출력함
//		그리고 getString()과 getInt() method를 이용해서 출력함
//		getString() return type은 String, getInt() return type은 Int

		System.out.println("NAME   " + "SALARY " + "DE_ID ");
		while (rs.next()) { // 읽어온 결과가 있어? boolean
//			System.out.print(rs.getString("FIRST_NAME") + " "); //컬럼이름 대소문자 구분없음
//			System.out.print(rs.getInt("SALARY") + " ");
//			System.out.println(rs.getInt("DEPARTMENT_ID") + " ");
			System.out.print(rs.getString(1) + "\t"); //컬럼이름 대소문자 구분없음
			System.out.print(rs.getInt(2) + "\t");
			System.out.println(rs.getInt(3) + "\t");
		}
		rs.close();
		ps.close();
		conn.close();

	}

	public static void main(String[] args) throws Exception {
		DBConnection2 dbc = new DBConnection2();
		dbc.connect();
	}
}